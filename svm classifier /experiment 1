# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, f1_score
from sklearn.feature_extraction.text import TfidfVectorizer
import matplotlib.pyplot as plt
import numpy as np

# Load dataset
DATA_PATH = 'path/to/your/dataset.csv'
df = pd.read_csv(DATA_PATH)

# Feature extraction using TF-IDF for code snippets
tfidf = TfidfVectorizer(max_features=1000)
X = tfidf.fit_transform(df['code']).toarray()

# Target variable 'label' for classification (0 = secure, 1 = insecure)
y = df['label']

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train SVM classifier
svm_classifier = SVC(kernel='linear')
svm_classifier.fit(X_train, y_train)

# Predict on the test set
y_pred = svm_classifier.predict(X_test)

# Evaluate classifier performance
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Accuracy Score:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-Score:", f1)

# Detailed classification report
print("Classification Report:\n", classification_report(y_test, y_pred))

# Cryptographic misuse categories and corresponding data
categories = [
    "Weak Cryptography (WC)",
    "Poor Key Management (PKM)",
    "Bad Randomness (BR)",
    "Program Design Flaws (PDF)",
    "Improper Certificate Validation (ICV)",
    "Coding and Implementation Bugs (CIB)",
    "Cryptography Architecture and Infrastructure (CAI)",
    "Public-Key Cryptography (PKC)",
    "IV/Nonce Management (IVM)"
]

# Number of secure and insecure instances
secure_instances = [10, 32, 8, 14, 5, 16, 7, 58, 10]
insecure_instances = [20, 19, 12, 23, 15, 29, 8, 68, 8]

# Plot histogram
fig, ax = plt.subplots(figsize=(10, 6))
bar_width = 0.35
index = np.arange(len(categories))

bar1 = ax.bar(index, secure_instances, bar_width, label='Secure Instances')
bar2 = ax.bar(index + bar_width, insecure_instances, bar_width, label='Insecure Instances')

ax.set_xlabel('Cryptographic Misuse Categories')
ax.set_ylabel('Number of Instances')
ax.set_title('Secure vs Insecure Instances by Category')
ax.set_xticks(index + bar_width / 2)
ax.set_xticklabels(categories, rotation=45, ha="right")
ax.legend()

plt.tight_layout()
plt.show()
